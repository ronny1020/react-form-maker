{"version":3,"sources":["../../src/FormItem.js","../../src/index.js","App.js","index.js"],"names":["FormItem","props","attributes","formClassName","formStyle","formGroupClassName","formGroupStyle","labelClassName","labelStyle","inputClassName","inputStyle","optionTags","text","option","key","i","className","style","htmlFor","id","ReactFormMaker","formItems","formItemAttributes","propsCopy","label","type","defaultValue","options","value","App","header","ReactDOM","render","document","getElementById"],"mappings":"qdAEO,IAAMA,EAAW,SAACC,GACvB,IAQA,EAUA,EAUA,EAUA,EASA,EAUA,EAzDMC,EAAaD,EAAnB,mBACME,EAAgBF,EAAtB,cACMG,EAAYH,EAAlB,UAgEA,OA9DKC,EAAL,OAAsBA,eACjBA,EAAL,QAAuBA,QAAmBA,EAAnBA,IAInBA,EAAJ,oBACEG,EAAqBH,EAArBG,0BACOH,EAAP,oBAEA,GACMC,EAAJ,qBACEE,EAAqBF,EAArBE,oBAIFH,EAAJ,gBACEI,EAAiBJ,EAAjBI,sBACOJ,EAAP,gBAEA,GACME,EAAJ,iBACEE,EAAiBH,EAAjBG,gBAIFJ,EAAJ,gBACEK,EAAiBL,EAAjBK,sBACOL,EAAP,gBAEA,GACMC,EAAJ,iBACEI,EAAiBJ,EAAjBI,gBAIFL,EAAJ,YACEM,EAAaN,EAAbM,kBACON,EAAP,YAEA,GACME,EAAJ,aAA0BI,EAAaL,EAAbK,YAI1BN,EAAJ,gBACEO,EAAiBP,EAAjBO,sBACOP,EAAP,gBAEA,GACMC,EAAJ,iBACEM,EAAiBN,EAAjBM,gBAIFP,EAAJ,YACEQ,EAAaR,EAAbQ,kBACOR,EAAP,YAEA,GACME,EAAJ,aAA0BM,EAAaP,EAAbO,YAGtBR,EAAR,MACE,aACE,IAAMS,EAAaT,EAAA,aAAuB,cACxC,IAAMU,EAAOC,OAAcA,EAAdA,KAA4BA,EAAzC,MACA,OACE,8BAAQC,IAAKC,GAAb,GADF,MAOF,OACE,yBAAKC,UAAL,EAAoCC,MAAOX,GACzC,2BACEU,UADF,EAEEC,MAFF,EAGEC,QAAShB,EAAWiB,IAEnBjB,EANL,OAQE,mCAAwBc,UAAxB,EAAmDC,MAAOP,IAT9D,IAgBF,aACE,OAAO,0BAAP,GAGF,QACE,OACE,yBAAKM,UAAL,EAAoCC,MAAOX,GACzC,2BACEU,UADF,EAEEC,MAFF,EAGEC,QAAShB,EAAWiB,IAEnBjB,EANL,OAQE,kCAEEc,UAFF,EAGEC,MAAOP,QC9GNU,EAAiB,SAACnB,GAC7B,IAAME,EAAgBF,EAAtB,cACMG,EAAYH,EAAlB,UACMoB,EAAYpB,EAAA,eAAoB,qBACpC,qBACEa,IADF,EAEEQ,mBAFF,EAGEnB,cAHF,EAIEC,UAAWA,OAGTmB,EAAY,EAAH,GAAf,GAOA,cANOA,EAAP,qBACOA,EAAP,iBACOA,EAAP,iBACOA,EAAP,cACOA,EAAP,OAGE,2BACGtB,EADH,SAGGA,EAJL,SCfIE,G,YAAgB,CACpBE,mBAAoB,aACpBE,eAAgB,GAChBE,eAAgB,iBAGZY,EAAY,CAChB,CAAEF,GAAI,OAAQK,MAAO,aAASC,KAAM,OAAQC,aAAc,QAC1D,CAAEP,GAAI,WACN,CAAEA,GAAI,QAASM,KAAM,UACrB,CAAEN,GAAI,WAAYM,KAAM,QACxB,CACEN,GAAI,SACJM,KAAM,SACNpB,mBAAoB,kBACpBsB,QAAS,CAAC,CAAEC,MAAO,OAAQhB,KAAM,QAAU,CAAEgB,MAAO,YAEtD,CACEA,MAAO,SACPH,KAAM,SACNT,UAAW,oBAiBAa,EAbH,WACV,OACE,oCACE,kBAAC,EAAD,CACEb,UAAU,YACVc,OAAQ,qDACRT,UAAWA,EACXlB,cAAeA,MC/BvB4B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.01881c77.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const FormItem = (props) => {\r\n  const attributes = props.formItemAttributes\r\n  const formClassName = props.formClassName\r\n  const formStyle = props.formStyle\r\n\r\n  if (!attributes.type) attributes.type = 'text'\r\n  if (!attributes.label) attributes.label = attributes.id\r\n\r\n  // className or style in attributes have priority than in the formClassName or formStyle\r\n  let formGroupClassName\r\n  if (attributes.formGroupClassName) {\r\n    formGroupClassName = attributes.formGroupClassName\r\n    delete attributes.formGroupClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.formGroupClassName)\r\n        formGroupClassName = formClassName.formGroupClassName\r\n  }\r\n\r\n  let formGroupStyle\r\n  if (attributes.formGroupStyle) {\r\n    formGroupStyle = attributes.formGroupStyle\r\n    delete attributes.formGroupStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.formGroupStyle)\r\n        formGroupStyle = formClassName.formGroupStyle\r\n  }\r\n\r\n  let labelClassName\r\n  if (attributes.labelClassName) {\r\n    labelClassName = attributes.labelClassName\r\n    delete attributes.labelClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.labelClassName)\r\n        labelClassName = formClassName.labelClassName\r\n  }\r\n\r\n  let labelStyle\r\n  if (attributes.labelStyle) {\r\n    labelStyle = attributes.labelStyle\r\n    delete attributes.labelStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.labelStyle) labelStyle = formClassName.labelStyle\r\n  }\r\n\r\n  let inputClassName\r\n  if (attributes.inputClassName) {\r\n    inputClassName = attributes.inputClassName\r\n    delete attributes.inputClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.inputClassName)\r\n        inputClassName = formClassName.inputClassName\r\n  }\r\n\r\n  let inputStyle\r\n  if (attributes.inputStyle) {\r\n    inputStyle = attributes.inputStyle\r\n    delete attributes.inputStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.inputStyle) inputStyle = formClassName.inputStyle\r\n  }\r\n\r\n  switch (attributes.type) {\r\n    case 'select': {\r\n      const optionTags = attributes.options.map((option, i) => {\r\n        const text = option.text ? option.text : option.value\r\n        return (\r\n          <option key={i} {...option}>\r\n            {text}\r\n          </option>\r\n        )\r\n      })\r\n\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label\r\n            className={labelClassName}\r\n            style={labelStyle}\r\n            htmlFor={attributes.id}\r\n          >\r\n            {attributes.label}\r\n          </label>\r\n          <select {...attributes} className={inputClassName} style={inputStyle}>\r\n            {optionTags}\r\n          </select>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    case ('button', 'submit'): {\r\n      return <input {...attributes} />\r\n    }\r\n\r\n    default:\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label\r\n            className={labelClassName}\r\n            style={labelStyle}\r\n            htmlFor={attributes.id}\r\n          >\r\n            {attributes.label}\r\n          </label>\r\n          <input\r\n            {...attributes}\r\n            className={inputClassName}\r\n            style={inputStyle}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\nimport { FormItem } from './FormItem'\n\nexport const ReactFormMaker = (props) => {\n  const formClassName = props.formClassName\n  const formStyle = props.formStyle\n  const formItems = props.formItems.map((attributes, i) => (\n    <FormItem\n      key={i}\n      formItemAttributes={attributes}\n      formClassName={formClassName}\n      formStyle={formStyle}\n    />\n  ))\n  const propsCopy = { ...props }\n  delete propsCopy.formClassName\n  delete propsCopy.formStyle\n  delete propsCopy.formItems\n  delete propsCopy.header\n  delete propsCopy.footer\n\n  return (\n    <form {...propsCopy}>\n      {props.header}\n      {formItems}\n      {props.footer}\n    </form>\n  )\n}\n","import React from 'react'\n\nimport { ReactFormMaker } from 'react-form-maker'\nimport 'react-form-maker/dist/index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst formClassName = {\n  formGroupClassName: 'form-group',\n  labelClassName: '',\n  inputClassName: 'form-control'\n}\n\nconst formItems = [\n  { id: 'name', label: 'Nameï¼š', type: 'text', defaultValue: 'test' },\n  { id: 'account' },\n  { id: 'phone', type: 'number' },\n  { id: 'birthday', type: 'date' },\n  {\n    id: 'gender',\n    type: 'select',\n    formGroupClassName: 'form-group mb-5',\n    options: [{ value: 'male', text: 'Male' }, { value: 'female' }]\n  },\n  {\n    value: 'Submit',\n    type: 'submit',\n    className: 'btn btn-primary'\n  }\n]\n\nconst App = () => {\n  return (\n    <>\n      <ReactFormMaker\n        className='container'\n        header={<h1>react-form-maker demo</h1>}\n        formItems={formItems}\n        formClassName={formClassName}\n      />\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}