{"version":3,"sources":["../../src/FormItem.js","../../src/index.js","App.js","../../src/actions/getReactFormData.js","index.js"],"names":["FormItem","props","attributes","formClassName","formStyle","formGroupClassName","formGroupStyle","labelClassName","labelStyle","inputClassName","inputStyle","child","optionTags","text","option","key","i","className","style","htmlFor","id","type","name","radioLabelStyle","ReactFormMaker","formItems","formItemAttributes","propsCopy","label","defaultValue","radioClassName","radioGroupClassName","radioLabelClassName","options","value","defaultChecked","App","header","onSubmit","event","preventDefault","data","item","document","getReactFormData","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8eec92ea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const FormItem = (props) => {\r\n  const attributes = props.formItemAttributes\r\n  const formClassName = props.formClassName\r\n  const formStyle = props.formStyle\r\n\r\n  if (!attributes.type) attributes.type = 'text'\r\n  if (!attributes.label && attributes.id) attributes.label = attributes.id\r\n  if (!attributes.label && attributes.name) attributes.label = attributes.name\r\n\r\n  // className or style in attributes have priority than in the formClassName or formStyle\r\n  let formGroupClassName\r\n  if (attributes.formGroupClassName) {\r\n    formGroupClassName = attributes.formGroupClassName\r\n    delete attributes.formGroupClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.formGroupClassName)\r\n        formGroupClassName = formClassName.formGroupClassName\r\n  }\r\n\r\n  let formGroupStyle\r\n  if (attributes.formGroupStyle) {\r\n    formGroupStyle = attributes.formGroupStyle\r\n    delete attributes.formGroupStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.formGroupStyle)\r\n        formGroupStyle = formClassName.formGroupStyle\r\n  }\r\n\r\n  let labelClassName\r\n  if (attributes.labelClassName) {\r\n    labelClassName = attributes.labelClassName\r\n    delete attributes.labelClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.labelClassName)\r\n        labelClassName = formClassName.labelClassName\r\n  }\r\n\r\n  let labelStyle\r\n  if (attributes.labelStyle) {\r\n    labelStyle = attributes.labelStyle\r\n    delete attributes.labelStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.labelStyle) labelStyle = formClassName.labelStyle\r\n  }\r\n\r\n  let inputClassName\r\n  if (attributes.inputClassName) {\r\n    inputClassName = attributes.inputClassName\r\n    delete attributes.inputClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.inputClassName)\r\n        inputClassName = formClassName.inputClassName\r\n  }\r\n\r\n  let inputStyle\r\n  if (attributes.inputStyle) {\r\n    inputStyle = attributes.inputStyle\r\n    delete attributes.inputStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.inputStyle) inputStyle = formClassName.inputStyle\r\n  }\r\n\r\n  switch (attributes.type) {\r\n    case 'div': {\r\n      const child = props.formItemAttributes.child\r\n      delete attributes.type\r\n      delete attributes.child\r\n      return <div {...attributes}>{child}</div>\r\n    }\r\n\r\n    case 'select': {\r\n      const optionTags = attributes.options.map((option, i) => {\r\n        const text = option.text ? option.text : option.value\r\n        return (\r\n          <option key={i} {...option}>\r\n            {text}\r\n          </option>\r\n        )\r\n      })\r\n      delete attributes.options\r\n\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label\r\n            className={labelClassName}\r\n            style={labelStyle}\r\n            htmlFor={attributes.id}\r\n          >\r\n            {attributes.label}\r\n          </label>\r\n          <select {...attributes} className={inputClassName} style={inputStyle}>\r\n            {optionTags}\r\n          </select>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    case 'radio': {\r\n      const optionTags = attributes.options.map((option, i) => {\r\n        const text = option.text ? option.text : option.value\r\n        const id = option.id ? option.id : option.value\r\n        delete option.text\r\n        delete option.id\r\n        return (\r\n          <div\r\n            className={attributes.radioGroupClassName}\r\n            style={attributes.radioGroupStyle}\r\n            key={i}\r\n          >\r\n            <input\r\n              id={id}\r\n              type='radio'\r\n              className={attributes.radioClassName}\r\n              style={attributes.radioStyle}\r\n              name={attributes.name}\r\n              {...option}\r\n            />\r\n            <label\r\n              htmlFor={id}\r\n              className={attributes.radioLabelClassName}\r\n              style={attributes.radioLabelStyle}\r\n            >\r\n              {text}\r\n            </label>\r\n          </div>\r\n        )\r\n      })\r\n      delete attributes.options\r\n\r\n      delete attributes.radioClassName\r\n      delete attributes.radioGroupClassName\r\n      delete attributes.radioLabelClassName\r\n      delete attributes.radioStyle\r\n      delete attributes.radioGroupStyle\r\n      delete attributes.radioLabelStyle\r\n\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label className={labelClassName} style={labelStyle}>\r\n            {attributes.label}\r\n          </label>\r\n          <div\r\n            {...attributes}\r\n            style={inputStyle}\r\n            className={attributes.inputClassName}\r\n          >\r\n            {optionTags}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    case ('button', 'submit'): {\r\n      return <input {...attributes} />\r\n    }\r\n\r\n    default:\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label\r\n            className={labelClassName}\r\n            style={labelStyle}\r\n            htmlFor={attributes.id}\r\n          >\r\n            {attributes.label}\r\n          </label>\r\n          <input\r\n            {...attributes}\r\n            className={inputClassName}\r\n            style={inputStyle}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { FormItem } from './FormItem'\r\nimport { getReactFormData } from './actions/getReactFormData'\r\n\r\nexport { getReactFormData }\r\n\r\nexport const ReactFormMaker = (props) => {\r\n  const formClassName = props.formClassName\r\n  const formStyle = props.formStyle\r\n  const formItems = props.formItems.map((attributes, i) => (\r\n    <FormItem\r\n      key={i}\r\n      formItemAttributes={attributes}\r\n      formClassName={formClassName}\r\n      formStyle={formStyle}\r\n    />\r\n  ))\r\n  const propsCopy = { ...props }\r\n  delete propsCopy.formClassName\r\n  delete propsCopy.formStyle\r\n  delete propsCopy.formItems\r\n  delete propsCopy.header\r\n  delete propsCopy.footer\r\n\r\n  return (\r\n    <form {...propsCopy}>\r\n      {props.header}\r\n      {formItems}\r\n      {props.footer}\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { ReactFormMaker, getReactFormData } from 'react-form-maker'\r\nimport 'react-form-maker/dist/index.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst formClassName = {\r\n  formGroupClassName: 'form-group',\r\n  labelClassName: '',\r\n  inputClassName: 'form-control'\r\n}\r\n\r\nconst formItems = [\r\n  { id: 'name', label: 'Name：', type: 'text', defaultValue: 'test' },\r\n  { id: 'account' },\r\n  { id: 'phone', type: 'number' },\r\n  { id: 'birthday', type: 'date' },\r\n  {\r\n    type: 'radio',\r\n    name: 'framework',\r\n\r\n    radioClassName: 'form-check-input',\r\n    radioGroupClassName: 'form-check',\r\n    radioLabelClassName: 'form-check-label',\r\n    options: [\r\n      { value: 'React', defaultChecked: true },\r\n      { value: 'Angular' },\r\n      { value: 'Vue', text: 'Vue.js' }\r\n    ]\r\n  },\r\n\r\n  {\r\n    id: 'gender',\r\n    type: 'select',\r\n    formGroupClassName: 'form-group mb-5',\r\n\r\n    options: [{ value: 'male', text: 'Male' }, { value: 'female' }]\r\n  },\r\n  { type: 'div', className: 'm-5', child: <hr /> },\r\n  {\r\n    value: 'Submit',\r\n    type: 'submit',\r\n    className: 'btn btn-primary'\r\n  }\r\n]\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <ReactFormMaker\r\n        className='container'\r\n        header={<h1>react-form-maker demo</h1>}\r\n        formItems={formItems}\r\n        formClassName={formClassName}\r\n        onSubmit={(event) => {\r\n          event.preventDefault()\r\n          const data = getReactFormData(formItems)\r\n          console.log(data)\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export const getReactFormData = (formItems) => {\r\n  const data = {}\r\n  formItems.forEach((item) => {\r\n    switch (item.type) {\r\n      case 'radio':\r\n        data[item.name] = document.querySelector(\r\n          `input[name=\"${item.name}\"]:checked`\r\n        ).value\r\n        break\r\n\r\n      case ('button', 'submit'):\r\n        break\r\n\r\n      case 'checkbox':\r\n        if (item.name) {\r\n          data[item.name] = document.getElementsByName(item.name).checked\r\n        } else if (item.id) {\r\n          data[item.id] = document.getElementById(item.id).checked\r\n        }\r\n        break\r\n\r\n      default:\r\n        if (item.name) {\r\n          data[item.name] = document.getElementsByName(item.name).value\r\n        } else if (item.id) {\r\n          data[item.id] = document.getElementById(item.id).value\r\n        }\r\n    }\r\n  })\r\n  return data\r\n}\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}