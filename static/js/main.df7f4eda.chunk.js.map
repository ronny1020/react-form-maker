{"version":3,"sources":["../../src/FormItem.js","../../src/index.js","App.js","../../src/actions/getReactFormData.js","index.js"],"names":["FormItem","props","attributes","id","formItemAttributes","formClassName","formStyle","formGroupClassName","formGroupStyle","labelClassName","labelStyle","inputClassName","inputStyle","child","optionTags","text","option","key","i","className","style","htmlFor","type","name","radioLabelStyle","ReactFormMaker","formItems","propsCopy","label","defaultValue","radioClassName","radioGroupClassName","radioLabelClassName","options","value","defaultChecked","App","header","onSubmit","event","preventDefault","data","item","document","getReactFormData","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.df7f4eda.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const FormItem = (props) => {\r\n  const attributes =\r\n    typeof props.formItemAttributes === 'string'\r\n      ? { id: props.formItemAttributes }\r\n      : props.formItemAttributes\r\n\r\n  const formClassName = props.formClassName\r\n  const formStyle = props.formStyle\r\n\r\n  if (!attributes.type) attributes.type = 'text'\r\n  if (!attributes.label && attributes.id) attributes.label = attributes.id\r\n  if (!attributes.label && attributes.name) attributes.label = attributes.name\r\n\r\n  // className or style in attributes have priority than in the formClassName or formStyle\r\n  let formGroupClassName\r\n  if (attributes.formGroupClassName) {\r\n    formGroupClassName = attributes.formGroupClassName\r\n    delete attributes.formGroupClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.formGroupClassName)\r\n        formGroupClassName = formClassName.formGroupClassName\r\n  }\r\n\r\n  let formGroupStyle\r\n  if (attributes.formGroupStyle) {\r\n    formGroupStyle = attributes.formGroupStyle\r\n    delete attributes.formGroupStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.formGroupStyle)\r\n        formGroupStyle = formClassName.formGroupStyle\r\n  }\r\n\r\n  let labelClassName\r\n  if (attributes.labelClassName) {\r\n    labelClassName = attributes.labelClassName\r\n    delete attributes.labelClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.labelClassName)\r\n        labelClassName = formClassName.labelClassName\r\n  }\r\n\r\n  let labelStyle\r\n  if (attributes.labelStyle) {\r\n    labelStyle = attributes.labelStyle\r\n    delete attributes.labelStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.labelStyle) labelStyle = formClassName.labelStyle\r\n  }\r\n\r\n  let inputClassName\r\n  if (attributes.inputClassName) {\r\n    inputClassName = attributes.inputClassName\r\n    delete attributes.inputClassName\r\n  } else {\r\n    if (formClassName)\r\n      if (formClassName.inputClassName)\r\n        inputClassName = formClassName.inputClassName\r\n  }\r\n\r\n  let inputStyle\r\n  if (attributes.inputStyle) {\r\n    inputStyle = attributes.inputStyle\r\n    delete attributes.inputStyle\r\n  } else {\r\n    if (formStyle)\r\n      if (formStyle.inputStyle) inputStyle = formClassName.inputStyle\r\n  }\r\n\r\n  switch (attributes.type) {\r\n    case 'div': {\r\n      const child = props.formItemAttributes.child\r\n      delete attributes.type\r\n      delete attributes.child\r\n      return <div {...attributes}>{child}</div>\r\n    }\r\n\r\n    case 'select': {\r\n      const optionTags = attributes.options.map((option, i) => {\r\n        const text = option.text ? option.text : option.value\r\n        return (\r\n          <option key={i} {...option}>\r\n            {text}\r\n          </option>\r\n        )\r\n      })\r\n      delete attributes.options\r\n\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label\r\n            className={labelClassName}\r\n            style={labelStyle}\r\n            htmlFor={attributes.id}\r\n          >\r\n            {attributes.label}\r\n          </label>\r\n          <select {...attributes} className={inputClassName} style={inputStyle}>\r\n            {optionTags}\r\n          </select>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    case 'radio': {\r\n      const optionTags = attributes.options.map((option, i) => {\r\n        const text = option.text ? option.text : option.value\r\n        const id = option.id ? option.id : option.value\r\n        delete option.text\r\n        delete option.id\r\n        return (\r\n          <div\r\n            className={attributes.radioGroupClassName}\r\n            style={attributes.radioGroupStyle}\r\n            key={i}\r\n          >\r\n            <input\r\n              id={id}\r\n              type='radio'\r\n              className={attributes.radioClassName}\r\n              style={attributes.radioStyle}\r\n              name={attributes.name}\r\n              {...option}\r\n            />\r\n            <label\r\n              htmlFor={id}\r\n              className={attributes.radioLabelClassName}\r\n              style={attributes.radioLabelStyle}\r\n            >\r\n              {text}\r\n            </label>\r\n          </div>\r\n        )\r\n      })\r\n      delete attributes.options\r\n\r\n      delete attributes.radioClassName\r\n      delete attributes.radioGroupClassName\r\n      delete attributes.radioLabelClassName\r\n      delete attributes.radioStyle\r\n      delete attributes.radioGroupStyle\r\n      delete attributes.radioLabelStyle\r\n\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label className={labelClassName} style={labelStyle}>\r\n            {attributes.label}\r\n          </label>\r\n          <div\r\n            {...attributes}\r\n            style={inputStyle}\r\n            className={attributes.inputClassName}\r\n          >\r\n            {optionTags}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    case ('button', 'submit'): {\r\n      return <input {...attributes} />\r\n    }\r\n\r\n    default:\r\n      return (\r\n        <div className={formGroupClassName} style={formGroupStyle}>\r\n          <label\r\n            className={labelClassName}\r\n            style={labelStyle}\r\n            htmlFor={attributes.id}\r\n          >\r\n            {attributes.label}\r\n          </label>\r\n          <input\r\n            {...attributes}\r\n            className={inputClassName}\r\n            style={inputStyle}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { FormItem } from './FormItem'\r\nimport { getReactFormData } from './actions/getReactFormData'\r\n\r\nexport { getReactFormData }\r\n\r\nexport const ReactFormMaker = (props) => {\r\n  const formClassName = props.formClassName\r\n  const formStyle = props.formStyle\r\n  const formItems = props.formItems.map((attributes, i) => (\r\n    <FormItem\r\n      key={i}\r\n      formItemAttributes={attributes}\r\n      formClassName={formClassName}\r\n      formStyle={formStyle}\r\n    />\r\n  ))\r\n  const propsCopy = { ...props }\r\n  delete propsCopy.formClassName\r\n  delete propsCopy.formStyle\r\n  delete propsCopy.formItems\r\n  delete propsCopy.header\r\n  delete propsCopy.footer\r\n\r\n  return (\r\n    <form {...propsCopy}>\r\n      {props.header}\r\n      {formItems}\r\n      {props.footer}\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { ReactFormMaker, getReactFormData } from 'react-form-maker'\r\n\r\nconst formClassName = {\r\n  formGroupClassName: 'form-group',\r\n  labelClassName: '',\r\n  inputClassName: 'form-control'\r\n}\r\n\r\nconst formItems = [\r\n  { id: 'name', label: 'Name：', type: 'text', defaultValue: 'test' },\r\n  { id: 'account' },\r\n  { id: 'phone', type: 'number' },\r\n  { id: 'birthday', type: 'date' },\r\n  {\r\n    type: 'radio',\r\n    name: 'framework',\r\n    radioClassName: 'form-check-input',\r\n    radioGroupClassName: 'form-check',\r\n    radioLabelClassName: 'form-check-label',\r\n    options: [\r\n      { value: 'React', defaultChecked: true },\r\n      { value: 'Angular' },\r\n      { value: 'Vue', text: 'Vue.js' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'gender',\r\n    type: 'select',\r\n    formGroupClassName: 'form-group mb-5',\r\n    options: [{ value: 'male', text: 'Male' }, { value: 'female' }]\r\n  },\r\n  'test1',\r\n  'test2',\r\n  { type: 'div', className: 'm-5', child: <hr /> },\r\n  {\r\n    value: 'Submit',\r\n    type: 'submit',\r\n    className: 'btn btn-primary'\r\n  }\r\n]\r\n\r\nconst App = () => {\r\n  return (\r\n    <ReactFormMaker\r\n      className='container'\r\n      header={<h1>react-form-maker demo</h1>}\r\n      formItems={formItems}\r\n      formClassName={formClassName}\r\n      onSubmit={(event) => {\r\n        event.preventDefault()\r\n        const data = getReactFormData(formItems)\r\n        console.log(data)\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default App\r\n","export const getReactFormData = (formItems) => {\r\n  const data = {}\r\n  formItems.forEach((item) => {\r\n    switch (item.type) {\r\n      case 'radio':\r\n        data[item.name] = document.querySelector(\r\n          `input[name=\"${item.name}\"]:checked`\r\n        ).value\r\n        break\r\n\r\n      case ('button', 'submit'):\r\n        break\r\n\r\n      case 'checkbox':\r\n        if (item.name) {\r\n          data[item.name] = document.getElementsByName(item.name).checked\r\n        } else if (item.id) {\r\n          data[item.id] = document.getElementById(item.id).checked\r\n        }\r\n        break\r\n\r\n      default:\r\n        if (item.name) {\r\n          data[item.name] = document.getElementsByName(item.name).value\r\n        } else if (item.id) {\r\n          data[item.id] = document.getElementById(item.id).value\r\n        }\r\n    }\r\n  })\r\n  return data\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}